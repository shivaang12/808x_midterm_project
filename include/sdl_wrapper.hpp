/**
 * @file      sdl_wrapper.hpp
 * @author    Shivang Patel
 * @copyright MIT license
 *
 * @brief DESCRIPTION
 * Header file for the class "Sdl_wrapper". This class act as wrapper of
 * original SDL library for C++. It encaptulates enough fuctionalities
 * from the library for visual of environment, on which
 * BFS has been used, and path it has generated. Information about
 * path and environment, obstacles and space size, will be recieved
 * externally from Bfs class and this will generate visuals accordingly
 *
 */

#pragma once

#include "SDL.h"
#include <memory>
#include <utility>
#include <vector>

/**
 * @brief      SDL library wrapper class for visulization of the BFS algorithm
 * through the Bfs class. This class will accept all the information regarding
 * the environment and path for plotting them in nice visuals.
 */
class Sdl_wrapper {
 public:
  /**
   * @brief       A constructor sets width_ and height_ vars of the class.
   *
   * @param[in]   width, height: width and height of the window generated
   * by SDL.
   *
   * @return      void: Return nothing.
   */
  Sdl_wrapper(int width, int height);
  /**
   * @brief       A constructor sets width_, height_ and obstacle_ptr_
   * vars of the class.
   *
   * @param[in]   width, height, obstacle_ptr: width and height of the
   * window generated by SDL and obstacle_ptr for obstacle visulaization
   * in SDL.
   *
   * @return      void: Return nothing.
   */
  Sdl_wrapper(int width, int height,
              std::shared_ptr<std::vector<int>> obstacle_ptr);
  /**
   * @brief       Sets the width_ var of the class.
   *
   * @param[in]   width: width of the window generated by SDL.
   *
   * @return      void: Return nothing.
   */
  auto set_width(int width) -> void;
  /**
   * @brief       Getter method to get the
   * width_ var of the class.
   *
   * @return      void: Return nothing.
   */
  auto get_width(void) -> int;
  /**
   * @brief       Sets the height_ var of the class.
   *
   * @param[in]   height: height of the window generated by SDL.
   *
   * @return      void: Return nothing.
   */
  auto set_height(int height) -> void;
  /**
   * @brief       Getter method to get the
   * width_ var of the class.
   *
   * @return      void: Return nothing.
   */
  auto get_height(void) -> int;
  /**
   * @brief       Handles events generated by the system,  such as
   * close, or mouse related event with SDL window.
   *
   * @return      void: Return nothing.
   */
  auto event_handler(void) -> int;
  /**
   * @brief       Simple function of updating the SDL generated
   * window or screen.
   *
   * @return      void: Return nothing.
   */
  auto update_screen(void) -> int;
  /**
   * @brief       Simple function of clearing the SDL generated
   * window or screen with current set color in renderer.
   *
   * @return      void: Return nothing.
   */
  auto clean(void) -> int;
  /**
   * @brief       Simple function that calls in-build SDL delay.
   *
   * @param[in]   delay: amount of delay in ms (milliseconds).
   *
   * @return      void: Return nothing.
   */
  auto call_delay(int delay) -> int;
  /**
   * @brief       This function calls SDL functions which can draw points
   * on the SDL window or screen at points information passed through params.
   *
   * @param[in]   point: co-ordinate at which point has to draw on SDL window.
   *
   * @return      void: Return nothing.
   */
  auto draw_point(std::pair<int, int> point) -> int;
  /**
   * @brief       This functions sets the obstacle_ptr_ var of the class.
   *
   * @param[in]   obstacle_ptr: shared_ptr of vector containing obstacle info.
   *
   * @return      int: If assigned then 1, otherwise 0.
   */
  auto set_obstacle_ptr(
      std::shared_ptr<std::vector<int>> obstacle_ptr) -> int;

 private:
  int width_;               ///< width container for SDL window
  int height_;              ///< height container for SDL window
  SDL_Renderer *renderer_;  ///< renderer's raw pointer for SDL window
  SDL_Window *window_;      ///< window's raw pointer for SDL window
  bool isPolling_;          ///< polling var for event hadler function
  std::shared_ptr<std::vector<int>>
      obstacle_ptr_;        ///< shared_ptr var for storing obstacle info
};
